Assignment 4 readme File

------------------------------------------------------------------------
Student 1: What is your name?

Shruti Roy

------------------------------------------------------------------------
Student 2: What is your name?

Misrach Ewunetie

------------------------------------------------------------------------
Student 1: What authorized sources of information did you use to
complete the assignment? COPY THE LIST of authorized sources of
information given in the "Policies" web page (also available on armlab
in the file ~cos217/AuthorizedSourcesList ) to this section of the
readme file, and edit it as appropriate.

Course lectures
Course precepts
Course website
man pages
Office hours

------------------------------------------------------------------------
Student 2: What authorized sources of information did you use to
complete the assignment? COPY THE LIST of authorized sources of
information given in the "Policies" web page (also available on armlab
in the file ~cos217/AuthorizedSourcesList ) to this section of the
readme file, and edit it as appropriate.

Course lectures
Course precepts
Course website
man pages
Office hours


------------------------------------------------------------------------
Student 1: What unauthorized sources of information did you use to
complete the assignment? List any unauthorized sources of information
that you used to complete the assignment, and describe how you used
them. The course "Policies" web page defines unauthorized sources of
information, and any source that you have used but not listed in the
authorized sources should be included here. Please note that using an
unauthorized source may trigger a course penalty, and depending on the
nature of the interaction, may additionally require the interaction
being reported to the Committee on Discipline. Write "None" if you used
no unauthorized sources of information.

None.

------------------------------------------------------------------------
Student 2: What unauthorized sources of information did you use to
complete the assignment? List any unauthorized sources of information
that you used to complete the assignment, and describe how you used
them. The course "Policies" web page defines unauthorized sources of
information, and any source that you have used but not listed in the
authorized sources should be included here. Please note that using an
unauthorized source may trigger a course penalty, and depending on the
nature of the interaction, may additionally require the interaction
being reported to the Committee on Discipline. Write "None" if you used
no unauthorized sources of information.

None.



------------------------------------------------------------------------
Student 1: What is your assessment of the assignment? Was it helpful?
Was it fun?

The assignment was very stressful, but I found it helpful in that it
challenged our ability to create functioning and well-designed modules,
which would be incredibly valuable for more complicated projects. The
use of checker modules was also very insightful in practicing debugging
and troubleshooting isseus.

------------------------------------------------------------------------
Student 2: What is your assessment of the assignment? Was it helpful?
Was it fun?

The assignment was helpful for learning about modularity as I hadn't really understood how to implement it during the lecture. I found that it was very time-consuming and difficult to do.


------------------------------------------------------------------------
(optional) What information can you provide about your submission that
will help your grader to grade it in the most favorable light? In
particular, what bugs are in your submission?



------------------------------------------------------------------------
What warnings does splint generate for Part 2's checker, and what are
your disagreements with them? Copy the splint warnings here, and
express your disagreement after each warning. If there are no
warnings, then write "None."

None.

------------------------------------------------------------------------
What warnings does critTer generate on checkerDT.c, and what are your
disagreements with them? Copy the critTer warnings here, and express
your disagreement after each warning. If there are no warnings, then
write "None."

None.

------------------------------------------------------------------------
What warnings does splint generate on your Part 3 code, and what are
your disagreements with them? Copy the splint warnings here, and
express your disagreement after each warning. If there are no
warnings, then write "None."

node.h:38:5: Function exported but not used outside node: Node_compare
  A declaration is exported, but not used outside this module.
  Declaration can use static qualifier. (Use -exportlocal to inhibit
  warning)
       node.c:137:1: Definition of Node_compare
       
We disagree with this warning because it is reasonable for a checker
or further implementations of ft to want to compare nodes, i.e. in
order to check order and possible duplicate nodes.

------------------------------------------------------------------------
What warnings does critTer generate on your Part 3 code, and what are
your disagreements with them? Copy the critTer warnings here, and
express your disagreement after each warning. If there are no
warnings, then write "None."

ft.c: line 653: low priority:
   A file should contain no more than 15 functions;
      this file contains 17 functions

      This is a minor issue. 12 of these functions are necessary to
      fulfill the interface functions, while the other 5 are necessary
      helper functions. Without those functions, the code would be
      repetitive, extraneous, and inefficient.

ft.c: line 294: medium priority:
   Do you want to validate 'contents' through an assert?

ft.c: line 470: medium priority:
   Do you want to validate 'newContents' through an assert?

   The two warnings above are irrelevant, since the contents of a file
   are allowed to be NULL. There is no way or reason to assert them.
   
ft.c: line 652: low priority:
   A source code file should contain fewer than 500 lines;
      this file contains 653 lines

      This issue cannot be helped, given the multitude of functions
      included in the file and their necessity.

ft.c: line 85: low priority:
   This area is deeply nested at level 4, consider refactoring

ft.c: line 88: low priority:
   This area is deeply nested at level 5, consider refactoring

   The nested if statements in these two areas cannot be refactored
   because the conditions necessitating the code inside them are heavily
   dependent on each other.

node.c: line 156: medium priority:
   Do you want to validate 'childID' through an assert?

node.c: line 180: medium priority:
   Do you want to validate 'childID' through an assert?

   These two warnings are irrelevant, since childID is allowed to be
   NULL, so they is no reason to assert them.

file.c: line 56: medium priority:
   Do you want to validate 'contents' through an assert?

file.c: line 137: medium priority:
   Do you want to validate 'contents' through an assert?

   These two warnings are irrelevant, since the contents of a file
   are allowed to be NULL. There is no reason to assert them.

------------------------------------------------------------------------
For each of the first three faulty BDT implementations required by Step
1.5, identify the function where there is a bug. You do not have to
identify the bug itself, only its location, but note that this must be
the location of the underlying error, which is not necessarily where
the error manifests itself or is "noticed" by the client.


Executable         Function with the underlying error
===============================================================
         ./bdtBad1        BDT_insertPath()
---------------------------------------------------------------
         ./bdtBad2        BDT_newNode()
---------------------------------------------------------------
         ./bdtBad3        BDT_unlinkParentToChild()
===============================================================

------------------------------------------------------------------------
bdtBad4 and bdtBad5 are optional extra credit:

For bdtBad4, you do not have to find the bug. Instead, indicate what
is the fundamental difference with trying to debug this executable in
gdb versus the first three:

The difference between this one and the others is that for the first
three, there was either an error that only showed itself manifested in
one group of print outs or simply showed that the program stopped
working at a specific line. For this one, not only did it show an error
in 2 different groups of outputs, but the issue was that it printed out
a set of values that weren't in the possible temps. Another difference
was that when trying to print (temp = BDT_toString() in the areas where
there were bugs, it printed out a\na/b\n...etc. which seemed right, but
when running the whole program, it was printed something entirely
different (0^ACa). The error didn't manifest itself into all printouts
of temp. We were able to debug this program by comparing it to the
previous 3 since we knew which parts had errors in the previous ones
finding that it was in BDT_toString().

For bdtBad5, you do not have to find the bug. Instead, indicate one
hypothesis for how the program could crash within the DynArray module,
which we promise is itself correct:

Running bdtBad5 indicates that an assertion error occurs in the
function BDT_strlenAccumulate, because the given string pointer is
NULL. This could cause DynArray to crash if the DynArray_map module is
passed the BDT_strlenAccumulate function, and the DynArray object it
operates on contains NULL string pointers, which would initiate the
same error since the NULL string pointers in the DynArray object will
be passed into BDT_strlenAccumulate.

------------------------------------------------------------------------
What are your critiques of the given DT implementations, as
specified in Step 2.5?

-DT_traversePathFrom is only called by DT_traversePath;
unnecessary to have multiple functions when only one is needed

-DT_removePathFrom only calls Node_destroy; unnecessary to have a
unique function

-DT_rmPathAt is only called by DT_rmPath; functions can be combined

-DT_toString can be simplified by including the DT_strlenAccumulate
functionality in DT_preOrderTraversal, since both are only used by
DT_toString

-Node_create and Node_addChild are redundant; Node_create should be
modified to link parent and child if parent is not NULL,
and Node_addChild discarded

-Node_buildPath is only called by Node_create and Node_addChild;
functions can be merged

-Node_getPath returns a pointer to the path field to client; data is
not encapsulated properly

-DT_linkParentToChild just calls Node_linkChild;
unnecessary and redudant

-Node_unlinkChild is only called by DT_rmPathAt before destroying the
child; function can be incorporated in Node_destroy
(also reduces coupling)

-DT_insertRestOfPath is strongly coupled with Node; uses Node_create
and DT_linkParentToChild (i.e. calling Node_linkChild), which can be
decoupled by only calling Node_addChild; Node_linkChild can be made
static

------------------------------------------------------------------------
